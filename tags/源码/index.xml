<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码 on 游戏不存在</title>
    <link>https://game404.github.io/tags/%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in 源码 on 游戏不存在</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>game404</copyright>
    <lastBuildDate>Mon, 11 Oct 2021 22:10:53 +0800</lastBuildDate>
    
	<atom:link href="https://game404.github.io/tags/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>神器 celery 源码解析 - 2 </title>
      <link>https://game404.github.io/post/python/celery-2/</link>
      <pubDate>Mon, 11 Oct 2021 22:10:53 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/celery-2/</guid>
      <description>Celery是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的工具。Celery 也是一款消息队列工具，</description>
    </item>
    
    <item>
      <title>celery 源码阅读 - 1</title>
      <link>https://game404.github.io/post/python/celery-1/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:31 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/celery-1/</guid>
      <description>Celery是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的工具。Celery 是一款消息队列工具，可</description>
    </item>
    
    <item>
      <title>requests项目如何使用pytest进行单元测试</title>
      <link>https://game404.github.io/post/python/requests-test/</link>
      <pubDate>Thu, 26 Aug 2021 19:52:59 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/requests-test/</guid>
      <description>pytest是python的单元测试框架，简单易用，在很多知名项目中应用。requests是python知名的http爬虫库，同样简单易用，</description>
    </item>
    
    <item>
      <title>Flask 源码阅读-下篇</title>
      <link>https://game404.github.io/post/python/flask-2/</link>
      <pubDate>Thu, 22 Jul 2021 22:50:13 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/flask-2/</guid>
      <description>flask项目大名鼎鼎，不需要多做介绍。我把它称之为python服务开发的TOP2项目，另外一个就是django。这两个项目各有千秋，各自有</description>
    </item>
    
    <item>
      <title>Flask 源码阅读-正菜</title>
      <link>https://game404.github.io/post/python/flask-1/</link>
      <pubDate>Fri, 02 Jul 2021 00:03:55 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/flask-1/</guid>
      <description>flask项目大名鼎鼎，不需要多做介绍。我把它称之为python服务开发的TOP2项目，另外一个就是django。这两个项目各有千秋，各自有</description>
    </item>
    
    <item>
      <title>Flask 源码阅读-开胃菜</title>
      <link>https://game404.github.io/post/python/flask-0/</link>
      <pubDate>Thu, 24 Jun 2021 23:37:06 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/flask-0/</guid>
      <description>flask项目大名鼎鼎，应该不需要多做介绍了吧。我把它称之为python服务开发的TOP2项目，另外一个就是django了，不需要比较孰优孰</description>
    </item>
    
    <item>
      <title>Werkzeug源码阅读-完结篇</title>
      <link>https://game404.github.io/post/python/werkzeug-3/</link>
      <pubDate>Thu, 17 Jun 2021 22:39:20 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/werkzeug-3/</guid>
      <description>Werkzeug是一个全面的WSGI Web应用程序库。它最初是WSGI实用程序各种工具的简单集合，现已成为最高级的WSGI实用程序库之一，是</description>
    </item>
    
    <item>
      <title>Werkzeug 源码阅读-下</title>
      <link>https://game404.github.io/post/python/werkzeug-2/</link>
      <pubDate>Thu, 03 Jun 2021 23:37:07 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/werkzeug-2/</guid>
      <description>Werkzeug是一个全面的WSGI Web应用程序库。它最初是WSGI实用程序各种工具的简单集合，现已成为最高级的WSGI实用程序库之一，是</description>
    </item>
    
    <item>
      <title>Werkzeug 源码阅读-上</title>
      <link>https://game404.github.io/post/python/werkzeug-1/</link>
      <pubDate>Fri, 28 May 2021 00:35:13 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/werkzeug-1/</guid>
      <description>Werkzeug是一个全面的WSGI Web应用程序库。它最初是WSGI实用程序各种工具的简单集合，现已成为最高级的WSGI实用程序库之一，是</description>
    </item>
    
    <item>
      <title>再聊我的源码阅读方法-xmlrpc源码慢读</title>
      <link>https://game404.github.io/post/python/xmlrpc-server-slow/</link>
      <pubDate>Thu, 20 May 2021 23:13:57 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/xmlrpc-server-slow/</guid>
      <description>之前介绍我的源码阅读方法，有粉丝朋友说很有帮助，认为是授人予鱼。这是过誉了，也让我很受鼓舞，这次带来另外一种阅读方法，希望对大家也有帮助。 在</description>
    </item>
    
    <item>
      <title>xmlrpc源码阅读</title>
      <link>https://game404.github.io/post/python/xmlrpc/</link>
      <pubDate>Thu, 06 May 2021 21:08:30 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/xmlrpc/</guid>
      <description>XML-RPC 是一种远程过程调用方法，它使用通过 HTTP 传递的 XML 作为载体。 有了它，客户端可以在远程服务器上调用带参数的服务器方法（服务器以 URI 命名）并获取结构化</description>
    </item>
    
    <item>
      <title>SQLAlchemy源码阅读-下篇</title>
      <link>https://game404.github.io/post/python/sqlalchemy-part-2/</link>
      <pubDate>Thu, 29 Apr 2021 22:38:13 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/sqlalchemy-part-2/</guid>
      <description>SQLAlchemy是Python SQL工具箱和ORM框架，它为应用程序开发人员提供了全面而灵活的SQL功能。它提供了一整套企业级持久化方案</description>
    </item>
    
    <item>
      <title>SQLAlchemy源码阅读-上篇</title>
      <link>https://game404.github.io/post/python/sqlalchemy-part-1/</link>
      <pubDate>Sat, 17 Apr 2021 10:05:57 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/sqlalchemy-part-1/</guid>
      <description>SQLAlchemy是Python SQL工具箱和ORM框架，它为应用程序开发人员提供了全面而灵活的SQL功能。它提供了一整套企业级持久化方案</description>
    </item>
    
    <item>
      <title>Requests源码v0.2阅读</title>
      <link>https://game404.github.io/post/python/requests-v0.2/</link>
      <pubDate>Thu, 08 Apr 2021 23:23:38 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/requests-v0.2/</guid>
      <description>前文[一步一步实现web服务器]介绍过 历史对比法 : 对比代码的需求变化和版本历史，从而学习需求如何被实现。今天我们一起从 requests 源码开始，使用 历史对</description>
    </item>
    
    <item>
      <title>不一样的docker操作</title>
      <link>https://game404.github.io/post/python/docker-py/</link>
      <pubDate>Thu, 25 Mar 2021 23:27:04 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/docker-py/</guid>
      <description>docker-py是Docker SDK for Python。docker-py主要利用了requests，使用http/socket协议连接本地的do</description>
    </item>
    
    <item>
      <title>一文打尽python-web开发的signal机制</title>
      <link>https://game404.github.io/post/python/blinker/</link>
      <pubDate>Thu, 18 Mar 2021 22:34:49 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/blinker/</guid>
      <description>signal在flask/django中都是很重要的解耦手段。flask的signal依赖blinker实现，django的signal也很</description>
    </item>
    
    <item>
      <title>python 模版引擎 Mako 源码阅读</title>
      <link>https://game404.github.io/post/python/mako/</link>
      <pubDate>Thu, 11 Mar 2021 23:43:34 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/mako/</guid>
      <description>Mako 是用Python编写的模板引擎。从概念上讲，mako是一种嵌入式Python（即Python Server Page）语言，模版被编译成Python代码</description>
    </item>
    
    <item>
      <title>python logging 源码阅读</title>
      <link>https://game404.github.io/post/python/logging/</link>
      <pubDate>Thu, 04 Mar 2021 23:22:39 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/logging/</guid>
      <description>python logging 源码阅读 python logging 模块实现了灵活的日志系统。整个模块仅仅3个类，不到5000行代码的样子，学习它可以加深对程序日志的了解，本文分下面几个部分:</description>
    </item>
    
    <item>
      <title>Gunicorn 源码阅读</title>
      <link>https://game404.github.io/post/python/gunicorn/</link>
      <pubDate>Wed, 24 Feb 2021 20:01:29 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/gunicorn/</guid>
      <description>gunicorn “Green Unicorn”，脱胎于ruby社区的Unicorn，是一个 WSGI HTTP Server。学习gunicorn后，我们可以把之前的 Bottle 程序正</description>
    </item>
    
    <item>
      <title>python tinydb 源码阅读</title>
      <link>https://game404.github.io/post/python/tinydb/</link>
      <pubDate>Wed, 17 Feb 2021 22:14:27 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/tinydb/</guid>
      <description>TinyDB是一个小型，简单易用，面向文档的数据库；代码仅1800行，纯python编写。TinyDB项目大小刚好，学习它可以了解NOSQL</description>
    </item>
    
    <item>
      <title>python argparse 源码阅读</title>
      <link>https://game404.github.io/post/python/argparse/</link>
      <pubDate>Thu, 11 Feb 2021 21:36:27 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/argparse/</guid>
      <description>http.server 可以使用 -h 查看帮助。这种自定义的命令行工具对用户使用程序非常有帮助，我们一起学习是如何实现命令工具的。 先看看展示: 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>python wsgiref 源码阅读</title>
      <link>https://game404.github.io/post/python/wsgiref/</link>
      <pubDate>Thu, 04 Feb 2021 22:13:53 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/wsgiref/</guid>
      <description>python web开发中http请求的处理流程通常是: web-browser &amp;lt;-&amp;gt; web-server &amp;lt;-&amp;gt; wsgi &amp;lt;-&amp;gt; web-application， 我们学习过基于bottle实现的web-applic</description>
    </item>
    
    <item>
      <title>python http 源码阅读</title>
      <link>https://game404.github.io/post/python/http/</link>
      <pubDate>Thu, 28 Jan 2021 22:13:45 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/http/</guid>
      <description>上篇文章在阅读bottle源码时候，没有详细介绍bottle如何处理http请求，这需要先阅读python-http源码。本周我们一起看看p</description>
    </item>
    
    <item>
      <title>Bottle 源码阅读</title>
      <link>https://game404.github.io/post/python/bottle/</link>
      <pubDate>Thu, 21 Jan 2021 22:46:56 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/bottle/</guid>
      <description>bottle是一个简单的python-web服务框架，可以和其它WSGI服务组合提供web服务。它最大的特色是所有代码都在单个文件中，这样限</description>
    </item>
    
    <item>
      <title>requests 源码阅读</title>
      <link>https://game404.github.io/post/python/requests/</link>
      <pubDate>Sun, 17 Jan 2021 08:31:48 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/requests/</guid>
      <description>requests是一个简洁易用的http-client库，早期在github的python项目受欢迎程度可以排名TOP10。介绍这个项目，我</description>
    </item>
    
    <item>
      <title>Redis-py 源码阅读</title>
      <link>https://game404.github.io/post/python/redis-py/</link>
      <pubDate>Sat, 09 Jan 2021 21:37:12 +0800</pubDate>
      
      <guid>https://game404.github.io/post/python/redis-py/</guid>
      <description>redis协议规范 redis-py概述 redis-py基础使用 RedisCommand Redis连接 连接池 pipeline LuaScript lock redis协议规范 RESP（Redis Serialization Proto</description>
    </item>
    
  </channel>
</rss>